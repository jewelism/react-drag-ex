{"version":3,"sources":["Drag.js","App.js","serviceWorker.js","index.js"],"names":["Drag","list","onChangeList","useState","dragTargetIndex","setDragTarget","dropTargetIndex","setDropTarget","dropOrder","setDropOrder","onDragStart","useCallback","e","index","onDragOver","bounds","target","getBoundingClientRect","ratio","clientY","top","height","handleDrop","dropIndex","newList","el","splice","id","style","display","flexDirection","map","text","key","onDragEnd","draggable","className","LIST","Boolean","window","location","hostname","match","ReactDOM","render","setList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAEe,SAASA,EAAT,GAAuC,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,aAAgB,EACVC,oBAAU,GADA,mBAC5CC,EAD4C,KAC3BC,EAD2B,OAEVF,oBAAU,GAFA,mBAE5CG,EAF4C,KAE3BC,EAF2B,OAGjBJ,mBAAS,GAHQ,mBAG5CK,EAH4C,KAGjCC,EAHiC,KAK7CC,EAAcC,uBAAY,SAACC,EAAGC,GAClCR,EAAcQ,KACb,IACGC,EAAaH,uBAAY,SAACC,EAAGC,GACjC,IAAME,EAASH,EAAEI,OAAOC,wBAClBC,GAASN,EAAEO,QAAUJ,EAAOK,KAAOL,EAAOM,OAChDZ,EAAaS,EAAQ,GAAM,EAAI,GAE/BX,EAAcM,KACb,IACGS,EAAaX,uBACjB,SAAAC,GACE,IAAMW,EAAYjB,EAAkBE,EACpC,GAAIe,GAAa,GAAKA,IAAcnB,EAAiB,CACnD,IAAMoB,EAAO,YAAOvB,GACdwB,EAAKD,EAAQE,OAAOtB,EAAiB,GAC3CoB,EAAQE,OAAR,MAAAF,EAAO,CACLD,GAAanB,EAAkBmB,EAAYA,EAAY,EACvD,GAFK,mBAGFE,KAELvB,EAAasB,GAEfjB,GAAe,KAEjB,CAACH,EAAiBI,EAAWF,EAAiBL,EAAMC,IAGtD,OACE,yBAAKyB,GAAG,UAAUC,MAAO,CAAEC,QAAS,OAAQC,cAAe,WACxD7B,EAAK8B,KAAI,WAAelB,GAAf,IAAGc,EAAH,EAAGA,GAAIK,EAAP,EAAOA,KAAP,OACR,4BACEC,IAAKN,EACLA,GAAIA,EACJjB,YAAa,SAAAE,GAAC,OAAIF,EAAYE,EAAGC,IACjCC,WAAY,SAAAF,GAAC,OAAIE,EAAWF,EAAGC,IAC/BqB,UAAWZ,EACXa,WAAS,EACTP,MAAO,CAAEP,OAAQ,IACjBe,UACE9B,IAAoBO,EAApB,0BACuBL,EAAY,QAAU,UACzC,IAGLwB,OCjDX,IAAMK,EAAO,CACX,CAAEV,GAAI,EAAGK,KAAM,OACf,CAAEL,GAAI,EAAGK,KAAM,OACf,CAAEL,GAAI,EAAGK,KAAM,OACf,CAAEL,GAAI,EAAGK,KAAM,QCKGM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFID,WAAgB,IAAD,EACJzC,mBAASkC,GADL,mBACrBpC,EADqB,KACf4C,EADe,KAO5B,OAAO,kBAAC7C,EAAD,CAAMC,KAAMA,EAAMC,aAJJ,SAAAD,GACnB4C,EAAQ5C,QERI,MAAS6C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5070d853.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\n\nexport default function Drag({ list, onChangeList }) {\n  const [dragTargetIndex, setDragTarget] = useState(-1);\n  const [dropTargetIndex, setDropTarget] = useState(-1);\n  const [dropOrder, setDropOrder] = useState(0);\n\n  const onDragStart = useCallback((e, index) => {\n    setDragTarget(index);\n  }, []);\n  const onDragOver = useCallback((e, index) => {\n    const bounds = e.target.getBoundingClientRect();\n    const ratio = (e.clientY - bounds.top) / bounds.height;\n    setDropOrder(ratio < 0.5 ? 0 : 1);\n\n    setDropTarget(index);\n  }, []);\n  const handleDrop = useCallback(\n    e => {\n      const dropIndex = dropTargetIndex + dropOrder;\n      if (dropIndex >= 0 && dropIndex !== dragTargetIndex) {\n        const newList = [...list];\n        const el = newList.splice(dragTargetIndex, 1);\n        newList.splice(\n          dropIndex <= dragTargetIndex ? dropIndex : dropIndex - 1,\n          0,\n          ...el\n        );\n        onChangeList(newList);\n      }\n      setDropTarget(-1);\n    },\n    [dragTargetIndex, dropOrder, dropTargetIndex, list, onChangeList]\n  );\n\n  return (\n    <div id=\"columns\" style={{ display: \"flex\", flexDirection: \"column\" }}>\n      {list.map(({ id, text }, index) => (\n        <button\n          key={id}\n          id={id}\n          onDragStart={e => onDragStart(e, index)}\n          onDragOver={e => onDragOver(e, index)}\n          onDragEnd={handleDrop}\n          draggable\n          style={{ height: 50 }}\n          className={\n            dropTargetIndex === index\n              ? `drag_place drop ${dropOrder ? \"after\" : \"before\"}`\n              : \"\"\n          }\n        >\n          {text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Drag from \"./Drag\";\n\nconst LIST = [\n  { id: 1, text: \"AAA\" },\n  { id: 2, text: \"BBB\" },\n  { id: 3, text: \"CCC\" },\n  { id: 4, text: \"DDD\" }\n];\n\nexport default function App() {\n  const [list, setList] = useState(LIST);\n\n  const onChangeList = list => {\n    setList(list);\n  };\n\n  return <Drag list={list} onChangeList={onChangeList} />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}